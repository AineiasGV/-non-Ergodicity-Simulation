beta = 1;    (*Initial perception rate*)
alpha = 0.4; (*Critical perception rate*)
opportunisticSellerRate = 0.02;
n = 1000;    (*Number of steps to simulate*)
transitionMatrix[beta_, 
   alpha_] := {{beta - alpha, 1 - (beta - alpha)}, {beta - alpha, 
    1 - (beta - alpha)}};
markovProcess[beta_] := 
  DiscreteMarkovProcess[1, transitionMatrix[beta, alpha]];
transitionMatrix[beta_, 
   alpha_] := {{beta - alpha, 1 - (beta - alpha)}, {beta - alpha, 
    1 - (beta - alpha)}};
markovProcess[beta_] := 
  DiscreteMarkovProcess[1, transitionMatrix[beta, alpha]];
simulationResults = 
  Table[If[RandomReal[] < opportunisticSellerRate, 
    beta = Max[beta - 0.1, alpha]];
   process = markovProcess[beta];
   RandomFunction[process, {0, 1}], {n}];
initialProperties = MarkovProcessProperties[markovProcess[1]]
finalProperties = MarkovProcessProperties[markovProcess[beta]
Insert[initialProperties, {Background -> {None, {GrayLevel[
      0.7], {White}}}, Dividers -> {Black, {2 -> Black}}, 
  Frame -> True, Spacings -> {2, {2, {0.7}, 2}}}, 2];
Insert[finalProperties, {Background -> {None, {GrayLevel[
      0.7], {White}}}, Dividers -> {Black, {2 -> Black}}, 
  Frame -> True, Spacings -> {2, {2, {0.7}, 2}}}, 2]
 Graph[markovProcess[1[]], VertexLabels -> {1 -> "H", 2 -> "L"}, 
 VertexSize -> Small, 
 EdgeLabels -> 
  With[{sm = 
     MarkovProcessProperties[markovProcess[1], "TransitionMatrix"]}, 
   Flatten@Table[DirectedEdge[i, j] -> sm[[i, j]], {i, 2}, {j, 2}]], 
 ImageSize -> Medium]
Graph[markovProcess[0.4[]], VertexLabels -> {1 -> "H", 2 -> "L"}, 
 VertexSize -> Small, 
 EdgeLabels -> 
  With[{sm = 
     MarkovProcessProperties[markovProcess[0.4], "TransitionMatrix"]},
    Flatten@Table[DirectedEdge[i, j] -> sm[[i, j]], {i, 2}, {j, 2}]], 
 ImageSize -> Medium]
